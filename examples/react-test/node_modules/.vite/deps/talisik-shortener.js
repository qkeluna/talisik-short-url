import "./chunk-76J2PTFD.js";

// node_modules/talisik-shortener/dist/index.esm.js
var TalisikError = class _TalisikError extends Error {
  constructor(message, status, code, details) {
    super(message);
    this.name = "TalisikError";
    this.status = status;
    this.code = code;
    this.details = details;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, _TalisikError);
    }
  }
  /**
   * Check if this is a network-related error
   */
  isNetworkError() {
    return !this.status || this.status === 408;
  }
  /**
   * Check if this is a client error (4xx)
   */
  isClientError() {
    return !!this.status && this.status >= 400 && this.status < 500;
  }
  /**
   * Check if this is a server error (5xx)
   */
  isServerError() {
    return !!this.status && this.status >= 500 && this.status < 600;
  }
  /**
   * Check if this error indicates the resource was not found
   */
  isNotFound() {
    return this.status === 404;
  }
  /**
   * Check if this error indicates a timeout
   */
  isTimeout() {
    return this.status === 408 || this.message.toLowerCase().includes("timeout");
  }
  /**
   * Convert error to JSON-serializable object
   */
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      code: this.code,
      details: this.details
    };
  }
};
var TalisikConfigError = class extends TalisikError {
  constructor(message) {
    super(message);
    this.name = "TalisikConfigError";
  }
};
var TalisikValidationError = class extends TalisikError {
  constructor(message) {
    super(message);
    this.name = "TalisikValidationError";
  }
};
var TalisikClient = class {
  constructor(config) {
    this.config = {
      timeout: 1e4,
      headers: {},
      apiKey: "",
      ...config
    };
    this.config.headers = {
      "Content-Type": "application/json",
      ...this.config.headers
    };
    if (this.config.apiKey) {
      this.config.headers["Authorization"] = `Bearer ${this.config.apiKey}`;
    }
  }
  /**
   * Shorten a URL
   *
   * @param request - The URL shortening request
   * @param options - Additional request options
   * @returns Promise that resolves to the shortened URL information
   *
   * @example
   * ```typescript
   * const result = await client.shorten({
   *   url: 'https://example.com',
   *   customCode: 'my-custom-code',
   *   expiresHours: 24
   * });
   * ```
   */
  async shorten(request, options) {
    const response = await this.request("POST", "/shorten", {
      url: request.url,
      custom_code: request.customCode,
      expires_hours: request.expiresHours
    }, options);
    return {
      shortUrl: response.short_url,
      originalUrl: response.original_url,
      shortCode: response.short_code,
      expiresAt: response.expires_at
    };
  }
  /**
   * Get information about a shortened URL
   *
   * @param shortCode - The short code to look up
   * @param options - Additional request options
   * @returns Promise that resolves to URL info or null if not found
   *
   * @example
   * ```typescript
   * const info = await client.getUrlInfo('abc123');
   * if (info) {
   *   console.log(`URL has been clicked ${info.clickCount} times`);
   * }
   * ```
   */
  async getUrlInfo(shortCode, options) {
    try {
      const response = await this.request("GET", `/info/${shortCode}`, void 0, options);
      return {
        shortCode: response.short_code,
        originalUrl: response.original_url,
        createdAt: response.created_at,
        expiresAt: response.expires_at,
        clickCount: response.click_count,
        isActive: response.is_active,
        isExpired: response.is_expired
      };
    } catch (error) {
      if (error instanceof TalisikError && error.status === 404) {
        return null;
      }
      throw error;
    }
  }
  /**
   * Get overall statistics
   *
   * @param options - Additional request options
   * @returns Promise that resolves to usage statistics
   *
   * @example
   * ```typescript
   * const stats = await client.getStats();
   * console.log(`Total URLs: ${stats.totalUrls}`);
   * ```
   */
  async getStats(options) {
    const response = await this.request("GET", "/api/stats", void 0, options);
    return {
      totalUrls: response.total_urls,
      activeUrls: response.active_urls,
      totalClicks: response.total_clicks
    };
  }
  /**
   * Get all shortened URLs for table display
   *
   * @param options - Additional request options
   * @returns Promise that resolves to array of URL records
   *
   * @example
   * ```typescript
   * const urls = await client.getAllUrls();
   * console.log(`Found ${urls.length} URLs`);
   * ```
   */
  async getAllUrls(options) {
    const response = await this.request("GET", "/api/urls", void 0, options);
    return response.urls || [];
  }
  /**
   * Get the redirect URL for a short code (without following the redirect)
   *
   * @param shortCode - The short code
   * @returns The full redirect URL
   *
   * @example
   * ```typescript
   * const redirectUrl = client.getRedirectUrl('abc123');
   * // Returns: https://api.talisik.com/abc123
   * ```
   */
  getRedirectUrl(shortCode) {
    return `${this.config.baseUrl}/${shortCode}`;
  }
  /**
   * Expand a short code to get the original URL (follows redirect)
   *
   * @param shortCode - The short code to expand
   * @param options - Additional request options
   * @returns Promise that resolves to the original URL or null if not found
   *
   * @example
   * ```typescript
   * const originalUrl = await client.expand('abc123');
   * // Returns: https://example.com
   * ```
   */
  async expand(shortCode, options) {
    try {
      const response = await fetch(`${this.config.baseUrl}/${shortCode}`, {
        method: "HEAD",
        headers: this.config.headers,
        signal: options == null ? void 0 : options.signal,
        redirect: "manual"
      });
      if (response.status === 301 || response.status === 302) {
        return response.headers.get("location");
      }
      if (response.status === 405 || response.status === 404) {
        const info = await this.getUrlInfo(shortCode, options);
        return info ? info.originalUrl : null;
      }
      return null;
    } catch (error) {
      try {
        const info = await this.getUrlInfo(shortCode, options);
        return info ? info.originalUrl : null;
      } catch (infoError) {
        throw new TalisikError(`Failed to expand URL: ${error}`);
      }
    }
  }
  /**
   * Low-level request method
   */
  async request(method, endpoint, body, options) {
    const url = `${this.config.baseUrl}${endpoint}`;
    const timeout = (options == null ? void 0 : options.timeout) || this.config.timeout;
    const headers = {
      ...this.config.headers,
      ...options == null ? void 0 : options.headers
    };
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);
    const signal = (options == null ? void 0 : options.signal) || controller.signal;
    try {
      const response = await fetch(url, {
        method,
        headers,
        body: body ? JSON.stringify(body) : void 0,
        signal
      });
      clearTimeout(timeoutId);
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new TalisikError(errorData.detail || `HTTP ${response.status}: ${response.statusText}`, response.status, errorData.code, errorData);
      }
      return await response.json();
    } catch (error) {
      clearTimeout(timeoutId);
      if (error instanceof TalisikError) {
        throw error;
      }
      if (error.name === "AbortError") {
        throw new TalisikError("Request timeout", 408);
      }
      throw new TalisikError(`Network error: ${error.message}`);
    }
  }
};
function createTalisikClient(config) {
  return new TalisikClient(config);
}
function getReact() {
  try {
    if (typeof window !== "undefined" && window.React) {
      return window.React;
    }
    if (typeof globalThis !== "undefined" && globalThis.require) {
      return globalThis.require("react");
    }
    return null;
  } catch {
    return null;
  }
}
function useTalisik(options) {
  const React = getReact();
  if (!React) {
    console.warn("React is not available. useTalisik hook cannot be used.");
    return void 0;
  }
  const { useState, useCallback, useMemo } = React;
  const [loading, setLoading] = useState(false);
  const errorState = useState(null);
  const error = errorState[0];
  const setError = errorState[1];
  const client = useMemo(() => {
    return new TalisikClient({
      baseUrl: options.baseUrl || "http://localhost:8000",
      apiKey: options.apiKey,
      headers: options.headers,
      timeout: options.timeout
    });
  }, [options.baseUrl, options.apiKey, options.headers, options.timeout]);
  const shortenUrl = useCallback(async (request) => {
    setLoading(true);
    setError(null);
    try {
      const result = await client.shorten(request);
      return result;
    } catch (err) {
      const talisikError = err instanceof TalisikError ? err : new TalisikError(`Unknown error: ${err}`);
      setError(talisikError);
      throw talisikError;
    } finally {
      setLoading(false);
    }
  }, [client]);
  const getUrlInfo = useCallback(async (shortCode) => {
    setLoading(true);
    setError(null);
    try {
      const result = await client.getUrlInfo(shortCode);
      return result;
    } catch (err) {
      const talisikError = err instanceof TalisikError ? err : new TalisikError(`Unknown error: ${err}`);
      setError(talisikError);
      throw talisikError;
    } finally {
      setLoading(false);
    }
  }, [client]);
  const getStats = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {
      const result = await client.getStats();
      return result;
    } catch (err) {
      const talisikError = err instanceof TalisikError ? err : new TalisikError(`Unknown error: ${err}`);
      setError(talisikError);
      throw talisikError;
    } finally {
      setLoading(false);
    }
  }, [client]);
  return {
    shortenUrl,
    getUrlInfo,
    getStats,
    loading,
    error
  };
}
function useTalisikClient(config) {
  const React = getReact();
  if (!React) {
    console.warn("React is not available. useTalisikClient hook cannot be used.");
    return void 0;
  }
  const { useMemo } = React;
  return useMemo(() => {
    return new TalisikClient(config);
  }, [config.baseUrl, config.apiKey, config.headers, config.timeout]);
}
var hooks = {
  useTalisik,
  useTalisikClient
};
export {
  TalisikClient,
  TalisikConfigError,
  TalisikError,
  TalisikValidationError,
  createTalisikClient,
  TalisikClient as default,
  hooks,
  useTalisik,
  useTalisikClient
};
//# sourceMappingURL=talisik-shortener.js.map
