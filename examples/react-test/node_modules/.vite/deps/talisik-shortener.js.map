{
  "version": 3,
  "sources": ["../../talisik-shortener/src/errors.ts", "../../talisik-shortener/src/client.ts", "../../talisik-shortener/src/factory.ts", "../../talisik-shortener/src/hooks.ts"],
  "sourcesContent": ["/**\n * Error classes for Talisik URL Shortener client\n */\n\n/**\n * Custom error class for Talisik-specific errors\n */\nexport class TalisikError extends Error {\n  public readonly status?: number;\n  public readonly code?: string;\n  public readonly details?: unknown;\n\n  constructor(\n    message: string,\n    status?: number,\n    code?: string,\n    details?: unknown\n  ) {\n    super(message);\n    this.name = \"TalisikError\";\n    this.status = status;\n    this.code = code;\n    this.details = details;\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if ((Error as any).captureStackTrace) {\n      (Error as any).captureStackTrace(this, TalisikError);\n    }\n  }\n\n  /**\n   * Check if this is a network-related error\n   */\n  isNetworkError(): boolean {\n    return !this.status || this.status === 408;\n  }\n\n  /**\n   * Check if this is a client error (4xx)\n   */\n  isClientError(): boolean {\n    return !!this.status && this.status >= 400 && this.status < 500;\n  }\n\n  /**\n   * Check if this is a server error (5xx)\n   */\n  isServerError(): boolean {\n    return !!this.status && this.status >= 500 && this.status < 600;\n  }\n\n  /**\n   * Check if this error indicates the resource was not found\n   */\n  isNotFound(): boolean {\n    return this.status === 404;\n  }\n\n  /**\n   * Check if this error indicates a timeout\n   */\n  isTimeout(): boolean {\n    return (\n      this.status === 408 || this.message.toLowerCase().includes(\"timeout\")\n    );\n  }\n\n  /**\n   * Convert error to JSON-serializable object\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n      code: this.code,\n      details: this.details,\n    };\n  }\n}\n\n/**\n * Error thrown when the Talisik client is not properly configured\n */\nexport class TalisikConfigError extends TalisikError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"TalisikConfigError\";\n  }\n}\n\n/**\n * Error thrown when a URL validation fails\n */\nexport class TalisikValidationError extends TalisikError {\n  constructor(message: string) {\n    super(message);\n    this.name = \"TalisikValidationError\";\n  }\n}\n", "import {\n  TalisikConfig,\n  ShortenRequest,\n  ShortenResponse,\n  UrlInfo,\n  Stats,\n  RequestOptions,\n  TalisikMethod,\n} from \"./types\";\nimport { TalisikError } from \"./errors\";\n\n/**\n * Main client class for interacting with Talisik URL Shortener API\n *\n * @example\n * ```typescript\n * const client = new TalisikClient({\n *   baseUrl: 'https://api.talisik.com'\n * });\n *\n * // Shorten a URL\n * const result = await client.shorten({\n *   url: 'https://example.com',\n *   customCode: 'my-link'\n * });\n *\n * // Get URL info\n * const info = await client.getUrlInfo('my-link');\n * ```\n */\nexport class TalisikClient {\n  private config: Required<TalisikConfig>;\n\n  constructor(config: TalisikConfig) {\n    this.config = {\n      timeout: 10000,\n      headers: {},\n      apiKey: \"\",\n      ...config,\n    };\n\n    // Add default headers\n    this.config.headers = {\n      \"Content-Type\": \"application/json\",\n      ...this.config.headers,\n    };\n\n    // Add API key header if provided\n    if (this.config.apiKey) {\n      this.config.headers[\"Authorization\"] = `Bearer ${this.config.apiKey}`;\n    }\n  }\n\n  /**\n   * Shorten a URL\n   *\n   * @param request - The URL shortening request\n   * @param options - Additional request options\n   * @returns Promise that resolves to the shortened URL information\n   *\n   * @example\n   * ```typescript\n   * const result = await client.shorten({\n   *   url: 'https://example.com',\n   *   customCode: 'my-custom-code',\n   *   expiresHours: 24\n   * });\n   * ```\n   */\n  async shorten(\n    request: ShortenRequest,\n    options?: RequestOptions\n  ): Promise<ShortenResponse> {\n    const response = await this.request<any>(\n      \"POST\",\n      \"/shorten\",\n      {\n        url: request.url,\n        custom_code: request.customCode,\n        expires_hours: request.expiresHours,\n      },\n      options\n    );\n\n    return {\n      shortUrl: response.short_url,\n      originalUrl: response.original_url,\n      shortCode: response.short_code,\n      expiresAt: response.expires_at,\n    };\n  }\n\n  /**\n   * Get information about a shortened URL\n   *\n   * @param shortCode - The short code to look up\n   * @param options - Additional request options\n   * @returns Promise that resolves to URL info or null if not found\n   *\n   * @example\n   * ```typescript\n   * const info = await client.getUrlInfo('abc123');\n   * if (info) {\n   *   console.log(`URL has been clicked ${info.clickCount} times`);\n   * }\n   * ```\n   */\n  async getUrlInfo(\n    shortCode: string,\n    options?: RequestOptions\n  ): Promise<UrlInfo | null> {\n    try {\n      const response = await this.request<any>(\n        \"GET\",\n        `/info/${shortCode}`,\n        undefined,\n        options\n      );\n\n      return {\n        shortCode: response.short_code,\n        originalUrl: response.original_url,\n        createdAt: response.created_at,\n        expiresAt: response.expires_at,\n        clickCount: response.click_count,\n        isActive: response.is_active,\n        isExpired: response.is_expired,\n      };\n    } catch (error) {\n      if (error instanceof TalisikError && error.status === 404) {\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get overall statistics\n   *\n   * @param options - Additional request options\n   * @returns Promise that resolves to usage statistics\n   *\n   * @example\n   * ```typescript\n   * const stats = await client.getStats();\n   * console.log(`Total URLs: ${stats.totalUrls}`);\n   * ```\n   */\n  async getStats(options?: RequestOptions): Promise<Stats> {\n    const response = await this.request<any>(\n      \"GET\",\n      \"/api/stats\",\n      undefined,\n      options\n    );\n\n    return {\n      totalUrls: response.total_urls,\n      activeUrls: response.active_urls,\n      totalClicks: response.total_clicks,\n    };\n  }\n\n  /**\n   * Get all shortened URLs for table display\n   *\n   * @param options - Additional request options\n   * @returns Promise that resolves to array of URL records\n   *\n   * @example\n   * ```typescript\n   * const urls = await client.getAllUrls();\n   * console.log(`Found ${urls.length} URLs`);\n   * ```\n   */\n  async getAllUrls(options?: RequestOptions): Promise<any[]> {\n    const response = await this.request<any>(\n      \"GET\",\n      \"/api/urls\",\n      undefined,\n      options\n    );\n\n    return response.urls || [];\n  }\n\n  /**\n   * Get the redirect URL for a short code (without following the redirect)\n   *\n   * @param shortCode - The short code\n   * @returns The full redirect URL\n   *\n   * @example\n   * ```typescript\n   * const redirectUrl = client.getRedirectUrl('abc123');\n   * // Returns: https://api.talisik.com/abc123\n   * ```\n   */\n  getRedirectUrl(shortCode: string): string {\n    return `${this.config.baseUrl}/${shortCode}`;\n  }\n\n  /**\n   * Expand a short code to get the original URL (follows redirect)\n   *\n   * @param shortCode - The short code to expand\n   * @param options - Additional request options\n   * @returns Promise that resolves to the original URL or null if not found\n   *\n   * @example\n   * ```typescript\n   * const originalUrl = await client.expand('abc123');\n   * // Returns: https://example.com\n   * ```\n   */\n  async expand(\n    shortCode: string,\n    options?: RequestOptions\n  ): Promise<string | null> {\n    try {\n      // First try HEAD request to get redirect without following it\n      const response = await fetch(`${this.config.baseUrl}/${shortCode}`, {\n        method: \"HEAD\",\n        headers: this.config.headers,\n        signal: options?.signal,\n        redirect: \"manual\",\n      });\n\n      if (response.status === 301 || response.status === 302) {\n        return response.headers.get(\"location\");\n      }\n\n      // If HEAD is not supported (405) or doesn't return redirect, fall back to info endpoint\n      if (response.status === 405 || response.status === 404) {\n        const info = await this.getUrlInfo(shortCode, options);\n        return info ? info.originalUrl : null;\n      }\n\n      return null;\n    } catch (error) {\n      // If HEAD request fails, try using the info endpoint as fallback\n      try {\n        const info = await this.getUrlInfo(shortCode, options);\n        return info ? info.originalUrl : null;\n      } catch (infoError) {\n        throw new TalisikError(`Failed to expand URL: ${error}`);\n      }\n    }\n  }\n\n  /**\n   * Low-level request method\n   */\n  private async request<T>(\n    method: TalisikMethod,\n    endpoint: string,\n    body?: any,\n    options?: RequestOptions\n  ): Promise<T> {\n    const url = `${this.config.baseUrl}${endpoint}`;\n    const timeout = options?.timeout || this.config.timeout;\n\n    const headers = {\n      ...this.config.headers,\n      ...options?.headers,\n    };\n\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    // Use the provided signal or our timeout signal\n    const signal = options?.signal || controller.signal;\n\n    try {\n      const response = await fetch(url, {\n        method,\n        headers,\n        body: body ? JSON.stringify(body) : undefined,\n        signal,\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new TalisikError(\n          errorData.detail || `HTTP ${response.status}: ${response.statusText}`,\n          response.status,\n          errorData.code,\n          errorData\n        );\n      }\n\n      return await response.json();\n    } catch (error) {\n      clearTimeout(timeoutId);\n\n      if (error instanceof TalisikError) {\n        throw error;\n      }\n\n      if ((error as any).name === \"AbortError\") {\n        throw new TalisikError(\"Request timeout\", 408);\n      }\n\n      throw new TalisikError(`Network error: ${(error as Error).message}`);\n    }\n  }\n}\n", "import { TalisikClient } from \"./client\";\nimport { TalisikConfig } from \"./types\";\n\n/**\n * Factory function to create a new Talisik client instance\n *\n * @param config - Client configuration\n * @returns A new TalisikClient instance\n *\n * @example\n * ```typescript\n * import { createTalisikClient } from 'talisik-shortener';\n *\n * const client = createTalisikClient({\n *   baseUrl: 'https://api.talisik.com'\n * });\n * ```\n */\nexport function createTalisikClient(config: TalisikConfig): TalisikClient {\n  return new TalisikClient(config);\n}\n\n/**\n * Create a Talisik client with common defaults for development\n *\n * @param overrides - Configuration overrides\n * @returns A new TalisikClient instance configured for development\n *\n * @example\n * ```typescript\n * const client = createDevClient(); // Uses localhost:8000\n * ```\n */\nexport function createDevClient(\n  overrides: Partial<TalisikConfig> = {}\n): TalisikClient {\n  return new TalisikClient({\n    baseUrl: \"http://localhost:8000\",\n    timeout: 5000,\n    ...overrides,\n  });\n}\n\n/**\n * Create a Talisik client with common defaults for production\n *\n * @param baseUrl - Production API URL\n * @param overrides - Configuration overrides\n * @returns A new TalisikClient instance configured for production\n *\n * @example\n * ```typescript\n * const client = createProdClient('https://api.yourdomain.com');\n * ```\n */\nexport function createProdClient(\n  baseUrl: string,\n  overrides: Partial<TalisikConfig> = {}\n): TalisikClient {\n  return new TalisikClient({\n    baseUrl,\n    timeout: 10000,\n    ...overrides,\n  });\n}\n", "/**\n * React hooks for Talisik URL Shortener\n *\n * These hooks are optional and only available if React is installed.\n * They provide an easy way to integrate Talisik with React applications.\n *\n * @example\n * ```typescript\n * import { useTalisik } from 'talisik-shortener';\n *\n * function MyComponent() {\n *   const { shortenUrl, loading, error } = useTalisik({\n *     baseUrl: 'https://api.talisik.com'\n *   });\n *\n *   const handleShorten = async () => {\n *     const result = await shortenUrl({ url: 'https://example.com' });\n *     console.log(result.shortUrl);\n *   };\n *\n *   return (\n *     <button onClick={handleShorten} disabled={loading}>\n *       {loading ? 'Shortening...' : 'Shorten URL'}\n *     </button>\n *   );\n * }\n * ```\n */\n\nimport { TalisikClient } from \"./client\";\nimport {\n  TalisikConfig,\n  ShortenRequest,\n  ShortenResponse,\n  UrlInfo,\n  Stats,\n  UseTalisikResult,\n  UseTalisikOptions,\n} from \"./types\";\nimport { TalisikError } from \"./errors\";\n\n// Check if React is available at runtime\nfunction getReact() {\n  try {\n    // Try to access React through global/window if available\n    if (typeof window !== \"undefined\" && (window as any).React) {\n      return (window as any).React;\n    }\n\n    // Try dynamic import for Node.js environments\n    if (typeof globalThis !== \"undefined\" && (globalThis as any).require) {\n      return (globalThis as any).require(\"react\");\n    }\n\n    return null;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * React hook for using Talisik URL Shortener\n *\n * @param options - Configuration options\n * @returns Object with shortening functions, loading state, and errors\n */\nexport function useTalisik(\n  options: UseTalisikOptions\n): UseTalisikResult | undefined {\n  const React = getReact();\n\n  if (!React) {\n    console.warn(\"React is not available. useTalisik hook cannot be used.\");\n    return undefined;\n  }\n\n  const { useState, useCallback, useMemo } = React;\n\n  const [loading, setLoading] = useState(false);\n  const errorState = useState(null);\n  const error = errorState[0] as TalisikError | null;\n  const setError = errorState[1] as (error: TalisikError | null) => void;\n\n  // Create client instance\n  const client = useMemo(() => {\n    return new TalisikClient({\n      baseUrl: options.baseUrl || \"http://localhost:8000\",\n      apiKey: options.apiKey,\n      headers: options.headers,\n      timeout: options.timeout,\n    });\n  }, [options.baseUrl, options.apiKey, options.headers, options.timeout]);\n\n  const shortenUrl = useCallback(\n    async (request: ShortenRequest): Promise<ShortenResponse> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await client.shorten(request);\n        return result;\n      } catch (err) {\n        const talisikError =\n          err instanceof TalisikError\n            ? err\n            : new TalisikError(`Unknown error: ${err}`);\n        setError(talisikError);\n        throw talisikError;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [client]\n  );\n\n  const getUrlInfo = useCallback(\n    async (shortCode: string): Promise<UrlInfo | null> => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const result = await client.getUrlInfo(shortCode);\n        return result;\n      } catch (err) {\n        const talisikError =\n          err instanceof TalisikError\n            ? err\n            : new TalisikError(`Unknown error: ${err}`);\n        setError(talisikError);\n        throw talisikError;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [client]\n  );\n\n  const getStats = useCallback(async (): Promise<Stats> => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await client.getStats();\n      return result;\n    } catch (err) {\n      const talisikError =\n        err instanceof TalisikError\n          ? err\n          : new TalisikError(`Unknown error: ${err}`);\n      setError(talisikError);\n      throw talisikError;\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  return {\n    shortenUrl,\n    getUrlInfo,\n    getStats,\n    loading,\n    error,\n  };\n}\n\n/**\n * React hook for creating a Talisik client instance\n *\n * @param config - Client configuration\n * @returns Memoized TalisikClient instance\n *\n * @example\n * ```typescript\n * function MyComponent() {\n *   const client = useTalisikClient({\n *     baseUrl: 'https://api.talisik.com'\n *   });\n *\n *   const handleShorten = async () => {\n *     const result = await client.shorten({ url: 'https://example.com' });\n *   };\n *\n *   return <button onClick={handleShorten}>Shorten</button>;\n * }\n * ```\n */\nexport function useTalisikClient(\n  config: TalisikConfig\n): TalisikClient | undefined {\n  const React = getReact();\n\n  if (!React) {\n    console.warn(\n      \"React is not available. useTalisikClient hook cannot be used.\"\n    );\n    return undefined;\n  }\n\n  const { useMemo } = React;\n\n  return useMemo(() => {\n    return new TalisikClient(config);\n  }, [config.baseUrl, config.apiKey, config.headers, config.timeout]);\n}\n\n// Export hook utilities\nexport const hooks = {\n  useTalisik,\n  useTalisikClient,\n};\n"],
  "mappings": "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",
  "names": []
}
